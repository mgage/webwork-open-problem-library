

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGgraphmacros.pl",
   "AppletObjects.pl",
   "parserImplicitEquation.pl",
   "parserMultiAnswer.pl",
   "source.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

#######################
### ggbApplet MultiAns
#######################
#
#  Make a subclass of MultiAnswer
#
package myMultiAnswer;
our @ISA = ('MultiAnswer');

sub new {
  my $self = shift;
  my $ma = $self->SUPER::new(@_);
  $ma->{part} = 1;
  $ma->{answerName} = 'answerBox';
  $ma->{id} = $MultiAnswer::answerPrefix.$ma->{answerName};
  $ma->{singleResult} = 1;
  $ma->{namedRules}  = 1;
  return $ma;
}

sub ANS_NAME {
  my $self = shift;
  my $i = shift;
  return ($i == 0 ? $self->{answerName} : $self->{id}.'_'.$i);
}

package main;

##############################################################
#
#  Setup
#
#
Context("ImplicitEquation");
Context()->variables->are(x=>["Real", limits=>[-8,8]], y=>["Real", limits=>[-8,8]]);
Context()->noreduce('(-x)-y');

$a = non_zero_random(-3,7,1);
do{ $b = non_zero_random(-5,5,1); } until ( $a != 1 || $b != 1 );
$c = $a*$b;

$f = Formula("$b x+$a y")->reduce;

$answer = ImplicitEquation("$f = $c");

$multians = myMultiAnswer->new($answer, $answer)->with(
  format => '%2$s',
  tex_format => '%2$s',
  checkTypes=>0,
  allowBlankAnswers=>1,
  checker => sub {
      my ( $correct, $student, $self, $ans_hash ) = @_;
      my ( $ggbStu, $eqnStu ) = @{$student};
      return [0,0] if $self->{ans}[0]->{isPreview};
      $ggbStu = ImplicitEquation($ggbStu); 
      $eqnStu = ImplicitEquation($eqnStu);
      Value->Error("Your equation doesn't match the graphed line.") if $ggbStu != $eqnStu;
      return [1,1];
  }
);

######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "geogebra.jar",
   codebase                 => findAppletCodebase("geogebra.jar"),
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 600,              # may want to modify width
   height                => 600,              # may want to modify height
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                 # to 1 to make xml representation visible
                                 # to 2 to add alerts detailing progression
                                 # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   #submitActionScript => '',
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


###############################################
#
#  PNG picture of GeoGebra applet for hardcopy

$im = init_graph(-8,-8,8,8, 
    size=>[400,400],
    grid=>[16,16],
    axes=>[0,0]
);

##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state 
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.

HEADER_TEXT(
qq! 
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready. 
           ww_applet_list[param].safe_applet_initialize(2);
       }
   } 
</script>
<noscript>For this question to work properly, 
you must enable JavaScript, or use another browser 
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {
     
     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here
     //  Setup the grid, then establish values, points, then the line

          applet.setPerspective("G");
          applet.setPointCapture(1,2);
          applet.setCoordSystem(-8,8,-8,8);
          applet.setAxisSteps(1,1,1);
          applet.setGridVisible('true');

          applet.evalCommand("a = 1");
          applet.evalCommand("b = 1");
          applet.evalCommand("A = (a,0)");
          applet.evalCommand("B = (0,b)");
          applet.evalCommand("l = Line[A,B]");

          applet.setColor('A',228,27,23);
          applet.setColor('B',228,27,23);
          //applet.setColor('l',228,27,23);


     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT

#######################################################
#
#  For retrieving values from GeoGebra into WeBWorK
# 

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
    	var applet = $appletName;
    	var l = applet.getLaTeXString("l");
        return( l ); 
}
 </script>
END_SCRIPT

###################################
# insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>$im,
                      HTML=>$applet->insertAll(
                                debug =>0,
                                reinitialize_button => 0,
                                includeAnswerBox=>1,
 )));

##############################################################
#
#  Text
#
#

BEGIN_PGML

Manipulate the points to any position you like, then give an equation for the resulting line below.

[@$multians->ans_rule(20)@]*

END_PGML

##############################################################
#
#  Answers
#
#

NAMED_ANS($multians->cmp() );

##############################################################
#
#  Grader that expects 4 correct answers to complete the problem
#
#

$needed = 4; # this can be set to as many as preferred

install_problem_grader(sub {
  my ($answers, $state) = (@_);
  my $result = {
    score => 0,
    errors => '',
    type => 'persistent grader',
    msg => '',
  };

  # pull the answer name, then pull its hash and score
  # multiAnswer means just the single answer entry is needed "[0]"
  my $name = $main::PG->{flags}{ANSWER_ENTRY_ORDER}[0]; 
  my $ans = $answers->{$name};
  my $score = $answers->{$name}{score};
  $result->{score} = $score;
  
  # pull previous answer data if it exists
  my $data = $main::inputs_ref->{_data} // "0";
  # number of correct responses is first, then colons separate answers
  # which have already received credit for this problem
  my ($correct,@previous) = split(/:/,$data);
  if ($main::inputs_ref->{submitAnswers}) {
    # if we got "credit" from the custom answer checker
    if ($score == 1) { 
      # pull the current student entry
      my $CURRENT = ImplicitEquation($ans->{student_ans}); 
      # for each previous answer (only those that received credit)
      foreach my $old (@previous) {
        my $PREVIOUS = ImplicitEquation($old); # string -> MathObject
        if ($CURRENT == $PREVIOUS) { # oops, you already got credit ;)
           $ans->{score} = $result->{score} = $score = 0; # zero out the score
           $ans->{ans_message} = "Your answer is the same as one of your previous correct ones"; # and tell the student why they're "wrong"
           break; # and no need to keep looping
        }
      }
      # if we still have $score == 1, push the current answer onto the stack
      # of responses that have received credit because we're giving credit XD
      push(@previous,$CURRENT->string) if $score;
    }
    if ($score == 1) { # if we're still giving credit for this answer
      $correct++ if $correct < $needed; # count towards number needed
      $state->{num_of_correct_ans}++; # let the DB know this was successful
      my $need = $needed - $correct; # one fewer answer needed
      #update student on their progress
      $ans->{ans_message} = "Good job! <BR>".
        "You need to get the problem correct $need more time".($need == 1 ? "" : "s")." for full credit."
            if $need && $ans->{ans_message} eq ''; 
    } else { # otherwise, if we're not giving credit...
      $state->{num_of_incorrect_ans}++; # let the DB know we missed this time
    }
    $state->{recorded_score} = $state->{sub_recorded_score} = $correct/$needed; # update the overall score for this problem
    # and prepare our (updated) array of answers that have received credit
    $data = join(':',$correct,@previous); 
  }

  # stash our joined array as a hidden data field and provide text to 
  # remind students of their overall progress towards $needed
  INSERT_RESPONSE($name,'_data',$data);
  $main::inputs_ref->{_data} = $data;
  $result->{msg} = '<input type="hidden" name="_data" value="'.$data.'" />' .
    ($correct ?
      ($correct == $needed ?
        'You have completed the problem.' :
        'You have '.$correct.' out of '.$needed.' correct so far.') :
      'You must get this problem correct '.$needed.' times for full credit.');

  return ($result, $state);
});

sub GEOGEBRA_PARAMS {
    my $result = {
        appName=>"classic", # instead of using ggbbase64
        enableShiftDragZoom=>"false",
        showResetIcon=>"false" ,
        enableRightClick=>"false" ,
        enableLabelDrags=>"false",
        showMenuBar=>"false" ,
        showToolBar=>"false",
        showAlgebraInput=>"false",
        useBrowserForJS=>"true",
        #ggbbase64=>''
};

$result;
}


ENDDOCUMENT();        
